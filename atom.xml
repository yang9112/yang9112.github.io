<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Yang's Home]]></title>
  <subtitle><![CDATA[Tips of Work and Study]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yang9112.github.io/"/>
  <updated>2015-09-14T01:06:02.111Z</updated>
  <id>http://yang9112.github.io/</id>
  
  <author>
    <name><![CDATA[Anysubway]]></name>
    <email><![CDATA[524435966@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[weka初探之数据预处理]]></title>
    <link href="http://yang9112.github.io/2015/09/13/2015-09-13-weka/"/>
    <id>http://yang9112.github.io/2015/09/13/2015-09-13-weka/</id>
    <published>2015-09-13T15:20:06.000Z</published>
    <updated>2015-09-14T01:06:02.111Z</updated>
    <content type="html"><![CDATA[<h1 id="Abstract">Abstract</h1><p>在我看来，机器学习工具使用的第一步就是熟悉如何处理数据，而学会如何处理数据的第一步就是数据的读取与存储。本文将会从数据的创建，读取以及存储这几个方面来介绍<strong>weka</strong>。</p>
<h1 id="使用Maven部署weka">使用Maven部署weka</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- weka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>nz.ac.waikato.cms.weka<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>weka-dev<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>3.7.13<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>JAVA的编译工具我选择的是IDEA（黑色的界面欲罢不能，于是彻底抛弃eclipse）。</p>
<h1 id="arff文件数据的读写"><strong>arff</strong>文件数据的读写</h1><p>在<strong>weka</strong>中最主要的数据类型就是<strong>Instances</strong>，数据文件都是<strong>*.arff</strong>的类型。</p>
<h2 id="arff文件的数据存储格式"><strong>arff</strong>文件的数据存储格式</h2><p>arff文件实例如下：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">@relation</span> weather</span><br><span class="line"></span><br><span class="line"><span class="constant">@attribute</span> outlook &#123;sunny, overcast, rainy&#125;</span><br><span class="line"><span class="constant">@attribute</span> temperature real</span><br><span class="line"><span class="constant">@attribute</span> humidity real</span><br><span class="line"><span class="constant">@attribute</span> windy &#123;<span class="literal">TRUE</span>, <span class="literal">FALSE</span>&#125;</span><br><span class="line"><span class="constant">@attribute</span> play &#123;yes, no&#125;</span><br><span class="line"></span><br><span class="line"><span class="constant">@data</span></span><br><span class="line">sunny,<span class="number">85</span>,<span class="number">85</span>,<span class="literal">FALSE</span>,no</span><br><span class="line">sunny,<span class="number">80</span>,<span class="number">90</span>,<span class="literal">TRUE</span>,no</span><br><span class="line">overcast,<span class="number">83</span>,<span class="number">86</span>,<span class="literal">FALSE</span>,yes</span><br></pre></td></tr></table></figure></p>
<p><code>relation</code>：用于描述这个文件，即表名。<br><code>attribute</code>：用于描述数据属性，数据有多少维度就必须有多少数据属性。数据属性<strong>Numeric</strong> 表示数字，而<strong>{*,*}</strong>表示类别属性。表述的基本形式是：<em>@attribute 属性名字 属性类型</em><br><code>data</code>：也即数据属性，中间用逗号隔开，而对于稀疏数据则是通过如下大括号进行表示<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@data</span><br><span class="line">&#123;<span class="number">2</span> <span class="number">1</span>,<span class="number">5</span> <span class="number">1</span>,...,<span class="number">10</span> <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="arff文件读取"><strong>arff</strong>文件读取</h2><p><strong>arff</strong>文件读取可以说是最简单的，<strong>weka</strong>内建了<strong>arff</strong>文件的读取器，可以通过如下两种方式初始化实例<strong>Instances</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArffLoader arffLoader = <span class="keyword">new</span> ArffLoader();</span><br><span class="line">arffLoader.setFile(<span class="keyword">new</span> File(filePath));</span><br><span class="line">Instances instances = arffLoader.getDataSet();</span><br></pre></td></tr></table></figure>
<p>或者可以直接读取到实例中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Instances instance = Instances(<span class="keyword">new</span> FileReader(filePath));</span><br></pre></td></tr></table></figure></p>
<h2 id="arff文件存储"><strong>arff</strong>文件存储</h2><p>预读取相似，<strong>arff</strong>的存储依靠已有的<strong>instances</strong>将会非常简单。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArffSaver arffSaver = <span class="keyword">new</span> ArffSaver();</span><br><span class="line">arffSaver.setFile(<span class="keyword">new</span> File(filePath));</span><br><span class="line">arffSaver.setInstances(instances);</span><br><span class="line">arffSaver.writeBatch();</span><br></pre></td></tr></table></figure></p>
<h1 id="Instances初始化"><strong>Instances</strong>初始化</h1><p>在<strong>weka</strong>数据中每一行都是一个<strong>instance</strong>，每一列都是一个<strong>attribute</strong>。而<strong>Instances</strong>则是<strong>instance</strong>的一个集合。<br>因此如果本身没有数据而想要创建一个<strong>Instances</strong>，必须通过创建<strong>instance</strong>。</p>
<h2 id="创建instance">创建<strong>instance</strong></h2><p><strong>instance</strong>有两种数据格式，一种是<strong>DenseInstance</strong>，另外一种是<strong>SparseInstance</strong>。</p>
<h3 id="DenseInstance"><strong>DenseInstance</strong></h3><p>对于稠密型的数据来说可以通过如下两种方式初始化Instance<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DenseInstance denseInstance = <span class="keyword">new</span> DenseInstance(<span class="keyword">int</span> numAttributes);</span><br><span class="line">DenseInstance denseInstance = <span class="keyword">new</span> DenseInstance(<span class="keyword">double</span> weight, <span class="keyword">double</span>[] attrVals);</span><br></pre></td></tr></table></figure></p>
<p>两种初始化方法不同之处在于，第一种方法建立的稠密实例里面的数据全部都是缺失的，而缺失的数据在<strong>weka</strong>中是用<strong>问号</strong>表示的。而第二种方法很好理解，<strong>weight</strong>表示实例的权值，另外一个参数则是对稠密实例进行赋值的数组。</p>
<h3 id="SparseInstance"><strong>SparseInstance</strong></h3><p>对于稀疏型的数据来说可以通过如下三种方式初始化Instance<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DenseInstance denseInstance = <span class="keyword">new</span> DenseInstance(<span class="keyword">int</span> numAttributes);</span><br><span class="line">DenseInstance denseInstance = <span class="keyword">new</span> DenseInstance(<span class="keyword">double</span> weight, <span class="keyword">double</span>[] attrVals);</span><br><span class="line">DenseInstance denseInstance = <span class="keyword">new</span> DenseInstance(<span class="keyword">double</span> weight, <span class="keyword">double</span>[] attrVals, <span class="keyword">int</span>[] indices, <span class="keyword">int</span> maxNumVals);</span><br></pre></td></tr></table></figure></p>
<p>前两种赋值方法与稠密型的类似，第三种方法则是通过数据对来对稀疏实例进行赋值，没有赋值的数据则是默认为0，而<strong>maxNumVals</strong>表示Instance的数据大小。</p>
<p>需要注意的是，因为第一种方法建立的稠密实例里面的数据全部都是缺失的，而稀疏实例只有值为0才会被省略。因此如果仅仅使用第一种方法进行初始化<strong>instance</strong>，我们得到是一个数据全缺失的稠密实例，如果将实例直接写入文件，那么每一个缺失数据的情况也会被写入，因为<strong>weka</strong>认为数据缺失也是需要被保存的。</p>
<p>用例如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 通过字典将已有数据转换为词向量同时添加Label位置</span><br><span class="line"> * <span class="doctag">@param</span> wiDic WD_ID 字典</span><br><span class="line"> * <span class="doctag">@param</span> text  内容</span><br><span class="line"> * <span class="doctag">@return</span>      稀疏向量实例</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Instance <span class="title">getKeyVec</span><span class="params">(Map&lt;String, Integer&gt; wiDic, String text)</span> </span>&#123;</span><br><span class="line">    List&lt;Term&gt; wd = ToAnalysis.parse(text);</span><br><span class="line">    SparseInstance sparseInstance = <span class="keyword">new</span> SparseInstance(<span class="number">1</span>, <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;, wiDic.size());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Term aWd : wd) &#123;</span><br><span class="line">        String key = aWd.getName();</span><br><span class="line">        <span class="keyword">if</span> (wiDic.containsKey(key))</span><br><span class="line">            sparseInstance.setValue(wiDic.get(key), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sparseInstance.setValue(wiDic.size(), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sparseInstance.mergeInstance(<span class="keyword">new</span> SparseInstance(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="实例化Instances">实例化<strong>Instances</strong></h2><p>用例如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 通过字典将已有数据转换为词向量矩阵</span><br><span class="line"> * <span class="doctag">@param</span> wiDic WD_ID 字典</span><br><span class="line"> * <span class="doctag">@param</span> text  文字内容</span><br><span class="line"> * <span class="doctag">@throws</span> Exception</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Instances <span class="title">getKeyMatrix</span><span class="params">(Map&lt;String, Integer&gt; wiDic, List&lt;String&gt; text, List&lt;String&gt; score)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ArrayList&lt;Attribute&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; wiDic.size(); idx++)</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> Attribute(String.valueOf(idx)));</span><br><span class="line">    List&lt;String&gt; arrayList1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    arrayList1.add(<span class="string">"2"</span>);</span><br><span class="line">    arrayList1.add(<span class="string">"1"</span>);</span><br><span class="line">    arrayList1.add(<span class="string">"0"</span>);</span><br><span class="line">    arrayList.add(<span class="keyword">new</span> Attribute(<span class="string">"class"</span>, arrayList1));</span><br><span class="line"></span><br><span class="line">    Instances instances = <span class="keyword">new</span> Instances(<span class="string">"DataSet"</span>, arrayList, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; text.size(); idx++) &#123;</span><br><span class="line">        instances.add(idx, getKeyVec(wiDic, text.get(idx)));</span><br><span class="line">        <span class="keyword">int</span> result = Integer.valueOf(score.get(idx)) + <span class="number">1</span>;</span><br><span class="line">        instances.instance(idx).setValue(wiDic.size(), String.valueOf(result));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Attribute</code>：用于创建属性<br><strong>Instances</strong>初始化后只需要添加<strong>Instance</strong>即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Abstract">Abstract</h1><p>在我看来，机器学习工具使用的第一步就是熟悉如何处理数据，而学会如何处理数据的第一步就是数据的读取与存储。本文将会从数据的创建，读取以及存储这几个方面来介绍<strong>weka</strong>。</p>
<h]]>
    </summary>
    
      <category term="MachineLearning" scheme="http://yang9112.github.io/tags/MachineLearning/"/>
    
      <category term="java" scheme="http://yang9112.github.io/tags/java/"/>
    
      <category term="weka" scheme="http://yang9112.github.io/tags/weka/"/>
    
      <category term="study" scheme="http://yang9112.github.io/categories/study/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[构建个人网站的血泪史]]></title>
    <link href="http://yang9112.github.io/2015/09/13/2015-09-13-hexo/"/>
    <id>http://yang9112.github.io/2015/09/13/2015-09-13-hexo/</id>
    <published>2015-09-13T08:22:54.000Z</published>
    <updated>2015-09-13T13:32:38.697Z</updated>
    <content type="html"><![CDATA[<p>其实最开始的开始，我只是想要有个地方可以记录下自己的学习，有个地方可以放放自己的随笔。怎么说呢？总觉得云笔记太low，还有就是显示不够炫酷……blabla一堆理由。（作为程序猿，赶脚只能在这些地方装装bigger了）。所以就萌生了这样一个想法，我要自己弄个blog玩玩，然而在最初有这个想法的时候，看了下已有的一些博客网站（在没有经过仔细的调查研究的情况下），认为这个事情很复杂，随后整个事情就被耽搁下来了！好啦，言归正传。</p>
<h2 id="博客搭建需求">博客搭建需求</h2><p>本文仅以windows为默认系统，OS以及LINUX可以移步<a href="https://hexo.io/docs/" target="_blank" rel="external">hexo</a>主页</p>
<blockquote>
<ul>
<li>github账号一个</li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">安装</a> Node.js</li>
<li><a href="http://www.git-scm.com/download/" target="_blank" rel="external">安装</a> Git(目测GitShell也支持，未尝试=。=）</li>
</ul>
</blockquote>
<h2 id="安装Hexo">安装Hexo</h2><ol>
<li><p>直接使用<code>npm</code>命令即可</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建hexo文件夹<br>进入到本地想要创建hexo代码的文件下</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装依赖包</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="运行hexo与效果查看">运行hexo与效果查看</h2><p>执行以下命令</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g //根据已有的配置生成网页文件</span><br><span class="line">hexo s //启动在本地查看效果的服务</span><br></pre></td></tr></table></figure>
<p>浏览器输入<code>localhost:4000</code>即可查看本地生成的页面了。</p>
<h2 id="如何托管代码到github">如何托管代码到github</h2><p>找到hexo主目录中的配置文件<code>_config.ymp</code></p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Deployment</span></span><br><span class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="label">deploy:</span></span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:username/username.github.io.git</span><br><span class="line"><span class="label">branch:</span> master</span><br></pre></td></tr></table></figure>
<p>只需要将上述代码中的username换成自己用户名就好了。至于如何通过github生成自己的动态网页生成自己的网页地址，在网上有着详细的教程，这里就不展开了（毕竟只是log）。</p>
<p>毕竟只是菜鸟，后续有学习体会继续更新~</p>
<h2 id="部分Q&amp;A">部分Q&amp;A</h2><p>安装过程中遇到的部分问题，以及解决办法</p>
<h3 id="Q：hexo_d命令无法上传github">Q：<code>hexo d</code>命令无法上传github</h3><p>配置文件有问题，如果配置文件的路径没有问题，那么可能是https上传有问题（部分情况会有无法识别用户名等错误），通过修改为ssh地址以及修改origin的url:<code>git remote origin ssh_url</code>完成上传。</p>
<h3 id="Q：主题怎么修改">Q：主题怎么修改</h3><p><code>git clone THEMES/PATH/TO/GITHUB PATH/TO/HEXO/ROOT/themes/THEMES_NAME</code> 然后修改配置文件即可<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Extensions</span></span><br><span class="line"><span class="preprocessor">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="preprocessor">## Themes: http://hexo.io/themes/</span></span><br><span class="line">theme: THEME_NAME</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>其实最开始的开始，我只是想要有个地方可以记录下自己的学习，有个地方可以放放自己的随笔。怎么说呢？总觉得云笔记太low，还有就是显示不够炫酷……blabla一堆理由。（作为程序猿，赶脚只能在这些地方装装bigger了）。所以就萌生了这样一个想法，我要自己弄个blog玩玩，然而]]>
    </summary>
    
      <category term="Hexo" scheme="http://yang9112.github.io/tags/Hexo/"/>
    
      <category term="MarkDown" scheme="http://yang9112.github.io/tags/MarkDown/"/>
    
      <category term="study" scheme="http://yang9112.github.io/categories/study/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[About blog & About myself]]></title>
    <link href="http://yang9112.github.io/2015/09/13/hello-world/"/>
    <id>http://yang9112.github.io/2015/09/13/hello-world/</id>
    <published>2015-09-13T06:09:16.000Z</published>
    <updated>2015-09-13T14:53:30.254Z</updated>
    <content type="html"><![CDATA[<h1 id="关于BLOG，关于自己">关于BLOG，关于自己</h1><hr>
<p>其实从有写个人博客的想法到真正建立起来中间隔了3年，为此我也是被自己深深的折服了，啧啧。</p>
<p>我曾经看到说有写博客的三大境界：</p>
<blockquote>
<ul>
<li>第一层境界：图个新鲜，能提升bigger，不知道什么时候就停更了。</li>
<li>第二层境界：博客写太多，开源网站提供的资源不够惬意，需要自己定制化需求。</li>
<li>第三层境界：管理博客太麻烦，最好找人管理，自己只要写博客就好了。</li>
</ul>
</blockquote>
<p>至于我？那么暂时还肯定是第一层次呐，嘿嘿。<br><img src="http://img5.duitang.com/uploads/item/201507/07/20150707093041_LvwdB.thumb.700_0.jpeg" alt="嘿嘿"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="关于BLOG，关于自己">关于BLOG，关于自己</h1><hr>
<p>其实从有写个人博客的想法到真正建立起来中间隔了3年，为此我也是被自己深深的折服了，啧啧。</p>
<p>我曾经看到说有写博客的三大境界：</p>
<blockquote>
<ul>
<li>]]>
    </summary>
    
      <category term="essay" scheme="http://yang9112.github.io/tags/essay/"/>
    
      <category term="blog" scheme="http://yang9112.github.io/categories/blog/"/>
    
  </entry>
  
</feed>
